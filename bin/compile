#!/bin/bash

set -e
set -o pipefail
shopt -s dotglob

basedir="$( cd -P "$( dirname "$0" )" && pwd )"
source "$basedir/../conf/buildpack.conf"
source $basedir/common.sh
source $basedir/../lib/composer
source $basedir/../lib/nodejs
source $basedir/../lib/newrelic

if [ -n "$BUILDPACK_DEBUG" ]; then
    set -x
fi

BUILD_DIR="$1"
CACHE_DIR="$2"

cd "$BUILD_DIR"
mkdir -p "$CACHE_DIR/package"

function fetch_engine_package() {
    local engine="$1"
    local version="$2"
    local location="$3"

    fetch_package "${engine}-${version}" "$location"
}

function fetch_package() {
    local package="$1"
    local location="$2"

    mkdir -p "$location"

    local checksum_url="${SWIFT_URL}/package/${package}.md5"
    local package_url="${SWIFT_URL}/package/${package}.tgz"
    local checksum=$(curl "$checksum_url" 2> /dev/null)
    local cache_checksum=

    if [ -f "$CACHE_DIR/package/${package}.md5" ]; then
        local cache_checksum=$(cat "$CACHE_DIR/package/${package}.md5")
    fi

    mkdir -p "$CACHE_DIR/package/$(dirname "$package")"

    if [ "$cache_checksum" != "$checksum" ]; then
        curl "$package_url" -L -s > "$CACHE_DIR/package/${package}.tgz"
        echo "$checksum" > "$CACHE_DIR/package/${package}.md5"
    else
        echo "Checksums match. Fetching from cache."
    fi

    tar xzf "$CACHE_DIR/package/${package}.tgz" -C "$location"
}

function detect_framework() {
  BUILD_DIR=$1
  for f in "$basedir/../frameworks/"*; do
      if "$f" detect "$BUILD_DIR"; then
          FRAMEWORK=$f
          break
      fi
  done
}

function php_api_version() {
    basename "$(php-config --extension-dir)" | tr '-' ' ' | cut -f 5 -d ' '
}

function has_heroku_extra() {
    test -n "$(jq --raw-output '.extra.heroku // ""' < "$BUILD_DIR/composer.json")"
}

function has_hhvm_engine() {
    test -n "$(jq --raw-output ".extra.${composer_extra_key}.engines.hhvm // \"\"" < "$BUILD_DIR/composer.json")"
}

function package_document_root() {
    jq --raw-output ".extra.${composer_extra_key}[\"document-root\"] // \"\"" < "$BUILD_DIR/composer.json"
}

function package_index_file() {
    jq --raw-output ".extra.${composer_extra_key}[\"index-document\"] // \"index.php\"" < "$BUILD_DIR/composer.json"
}

function package_framework() {
    jq --raw-output ".extra.${composer_extra_key}.framework // \"\"" < "$BUILD_DIR/composer.json"
}

function package_version() {
    local package=$1
    jq --raw-output ".extra.${composer_extra_key}.engines.${package} // \"default\"" < "$BUILD_DIR/composer.json"
}

function package_config() {
    local package=$1
    jq --raw-output ".extra.${composer_extra_key}[\"${package}-config\"] // [] | .[]" < "$BUILD_DIR/composer.json"
}

function package_includes() {
    local package=$1
    jq --raw-output ".extra.${composer_extra_key}[\"${package}-includes\"] // [] | .[]" < "$BUILD_DIR/composer.json"
}

function package_log_files() {
    jq --raw-output ".extra.${composer_extra_key}[\"log-files\"] // [] | .[]" < "$BUILD_DIR/composer.json"
}

function package_compile_cmd() {
    jq --raw-output ".extra.${composer_extra_key}[\"compile\"] // [] | .[]" < "$BUILD_DIR/composer.json"
}

function package_newrelic_enabled() {
    local val=$(jq --raw-output ".extra.${composer_extra_key}[\"newrelic\"] // false" < "$BUILD_DIR/composer.json")

    if [ "$val" = "true" ]; then
        return 0
    else
        return 1
    fi
}

export_env_dir "$3"

# Download jq binary for JSON processing
mkdir -p $BUILD_DIR/bin
export PATH="$BUILD_DIR/bin:$PATH"
curl "${SWIFT_URL}/jq/jq" -L -s -o - > "$BUILD_DIR/bin/jq"
chmod +x "$BUILD_DIR/bin/jq"

DEFAULT_PHP="5.5.15"
DEFAULT_NGINX="1.6.0"
DEFAULT_HHVM="3.2.0"

AVAILABLE_PHP_VERSIONS=$(curl "${SWIFT_URL}/manifest.php" 2> /dev/null)
AVAILABLE_HHVM_VERSIONS=$(curl "${SWIFT_URL}/manifest.hhvm" 2> /dev/null)
AVAILABLE_NGINX_VERSIONS=$(curl "${SWIFT_URL}/manifest.nginx" 2> /dev/null)

MCRYPT_VERSION="2.5.8"
PHP_VERSION="default"
NGINX_VERSION="default"
DOCUMENT_ROOT=
INDEX_DOCUMENT="index.php"
FRAMEWORK=
HHVM_EXTRA_CONFIG=
PHP_EXTRA_CONFIG=
PHP_INCLUDES=
COMPILE_CMD=
NGINX_INCLUDES=
NEWRELIC_VERSION=4.4.5.35
LOG_FILES=( "/app/vendor/nginx/logs/access.log" "/app/vendor/nginx/logs/error.log" )

check_composer_syntax "$BUILD_DIR"
check_composer_json_and_lock "$BUILD_DIR"

# Read config variables from composer.json if it exists
if [ -f "$BUILD_DIR/composer.json" ]; then
  composer_extra_key="paas"
  if has_heroku_extra ; then
    protip "Your composer.json is using the key 'extra' → 'heroku', you should switch to 'extra' → 'paas' for standardization"
    composer_extra_key="heroku"
  fi

  PHP_VERSION=$(package_version php)
  NGINX_VERSION=$(package_version nginx)
  HHVM_VERSION=$(package_version hhvm)
  DOCUMENT_ROOT=$(package_document_root)
  INDEX_DOCUMENT=$(package_index_file)
  FRAMEWORK=$(package_framework)
  HHVM_EXTRA_CONFIG=$(package_config hhvm)
  PHP_EXTRA_CONFIG=$(package_config php)
  PHP_INCLUDES=$(package_includes php)
  COMPILE_CMD=$(package_compile_cmd)
  NGINX_INCLUDES=$(package_includes nginx)
  USER_LOG_FILES=$(package_log_files)
fi

# Try reading PHP version from .php-version file in project
[ -f "$BUILD_DIR/.php-version" ] && PHP_VERSION=$(cat "$BUILD_DIR/.php-version")
[ "$PHP_VERSION" = "default" ] && PHP_VERSION="$DEFAULT_PHP"
[ "$NGINX_VERSION" = "default" ] && NGINX_VERSION="$DEFAULT_NGINX"
[ "$HHVM_VERSION" = "default"  ] && HHVM_VERSION="$DEFAULT_HHVM" 


# Look for ".*" versions, match them against all available versions
# and select the latest version which was found.
echo "$PHP_VERSION" | grep -q '\*' && \
  PHP_VERSION=$(echo "$AVAILABLE_PHP_VERSIONS" | grep "^$PHP_VERSION$" | sort -r | head -n1)
echo "$NGINX_VERSION" | grep -q '\*' && \
  NGINX_VERSION=$(echo "$AVAILABLE_NGINX_VERSIONS" | grep "^$NGINX_VERSION$" | sort -r | head -n1)
echo "$HHVM_VERSION" | grep -q '\*' && \
  HHVM_VERSION=$(echo "$AVAILABLE_HHVM_VERSIONS" | grep "^$HHVM_VERSION$" | sort -r | head -n1)

VENDORED_NGINX=/app/vendor/nginx
VENDORED_PHP=/app/vendor/php
VENDORED_HHVM=/app/vendor/hhvm

[ ! -d "$BUILD_DIR/vendor" ] && mkdir -p "$BUILD_DIR/vendor"

status "Bundling NGINX ${NGINX_VERSION}"
fetch_engine_package nginx "$NGINX_VERSION" /app/vendor/nginx | indent

test ! -d ".profile.d" && mkdir -p .profile.d || true

if has_hhvm_engine ; then
  . "$basedir/compile_hhvm"
else
  . "$basedir/compile_php"
fi

